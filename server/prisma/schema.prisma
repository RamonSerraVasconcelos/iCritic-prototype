generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int      @id @default(autoincrement())
    name              String
    email             String   @unique
    password          String
    description       String?
    role              Role     @default(DEFAULT)
    active            Boolean  @default(true)
    banlist           BanList?
    countryId         Int?
    country           Country? @relation(fields: [countryId], references: [id])
    image             Image?   @relation(fields: [imageId], references: [id])
    imageId           Int?     @unique
    passwordResetHash String?
    passwordResetDate Int?
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    @@map("users")
}

model Country {
    id       Int        @id @default(autoincrement())
    name     String
    user     User[]
    actor    Actor[]
    director Director[]

    @@map("countries")
}

model BanList {
    id         Int      @id @default(autoincrement())
    motive     String
    user       User     @relation(fields: [userId], references: [id])
    userId     Int      @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("banlist")
}

model Movie {
    id             Int              @id @default(autoincrement())
    name           String
    synopsis       String
    releaseDate    String
    country        String
    language       String
    rating         Int
    director       Director         @relation(fields: [directorId], references: [id])
    directorId     Int              @unique
    Movie_Category Movie_Category[]
    Movie_Actor    Movie_Actor[]
    created_at     DateTime         @default(now())
    updated_at     DateTime         @updatedAt

    @@map("movies")
}

model Movie_Category {
    id         Int      @id @default(autoincrement())
    movie      Movie    @relation(fields: [movieId], references: [id])
    movieId    Int
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("movie_category")
}

model Category {
    id             Int              @id @default(autoincrement())
    name           String
    Movie_Category Movie_Category[]
    created_at     DateTime         @default(now())
    updated_at     DateTime         @updatedAt

    @@map("categories")
}

model Movie_Actor {
    id         Int      @id @default(autoincrement())
    movie      Movie    @relation(fields: [movieId], references: [id])
    movieId    Int
    actor      Actor    @relation(fields: [actorId], references: [id])
    actorId    Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("movie_actor")
}

model Director {
    id             Int              @id @default(autoincrement())
    name           String
    Movie          Movie?
    Director_Image Director_Image[]
    country        Country?         @relation(fields: [countryId], references: [id])
    countryId      Int?
    created_at     DateTime         @default(now())
    updated_at     DateTime         @updatedAt

    @@map("directors")
}

model Director_Image {
    id         Int      @id @default(autoincrement())
    director   Director @relation(fields: [directorId], references: [id])
    directorId Int
    image      Image    @relation(fields: [imageId], references: [id])
    imageId    Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("director_image")
}

model Actor {
    id          Int           @id @default(autoincrement())
    name        String
    Movie_Actor Movie_Actor[]
    Actor_Image Actor_Image[]
    country     Country?      @relation(fields: [countryId], references: [id])
    countryId   Int?
    created_at  DateTime      @default(now())
    updated_at  DateTime      @updatedAt

    @@map("actors")
}

model Actor_Image {
    id         Int      @id @default(autoincrement())
    actor      Actor    @relation(fields: [actorId], references: [id])
    actorId    Int
    image      Image    @relation(fields: [imageId], references: [id])
    imageId    Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("actor_image")
}

model Image {
    id             Int              @id @default(autoincrement())
    Director_Image Director_Image[]
    Actor_Image    Actor_Image[]
    User           User?
    created_at     DateTime         @default(now())
    updated_at     DateTime         @updatedAt

    @@map("images")
}

enum Role {
    DEFAULT
    ADMIN
    MODERATOR
}

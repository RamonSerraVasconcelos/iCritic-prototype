generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int       @id @default(autoincrement())
    name              String
    email             String    @unique
    password          String
    description       String?
    role              Role      @default(DEFAULT)
    active            Boolean   @default(true)
    banlist           BanList[]
    country           Country   @relation(fields: [countryId], references: [id])
    countryId         Int       @map("country_id")
    image             Image?    @relation(fields: [imageId], references: [id])
    imageId           Int?      @unique @map("image_id")
    passwordResetHash String?   @map("password_reset_hash")
    passwordResetDate DateTime? @map("password_reset_date")
    refreshToken      String?   @map("refresh_token")
    createdAt         DateTime  @default(now()) @map("created_at")
    updatedAt         DateTime  @updatedAt @map("updated_at")

    @@map("users")
}

model Country {
    id       Int        @id @default(autoincrement())
    name     String
    user     User[]
    movie    Movie[]
    actor    Actor[]
    director Director[]

    @@map("countries")
}

model BanList {
    id        Int      @id @default(autoincrement())
    motive    String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @map("user_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("banlist")
}

model Movie {
    id            Int              @id @default(autoincrement())
    name          String
    synopsis      String
    releaseDate   String           @map("release_date")
    language      String
    rating        Int
    country       Country          @relation(fields: [countryId], references: [id])
    countryId     Int              @map("country_id")
    director      Director         @relation(fields: [directorId], references: [id])
    directorId    Int              @unique @map("director_id")
    movieCategory Movie_Category[]
    movieActor    Movie_Actor[]
    createdAt     DateTime         @default(now()) @map("created_at")
    updatedAt     DateTime         @updatedAt @map("updated_at")

    @@map("movies")
}

model Movie_Category {
    id         Int      @id @default(autoincrement())
    movie      Movie    @relation(fields: [movieId], references: [id])
    movieId    Int      @map("movie_id")
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int      @map("category_id")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@map("movie_category")
}

model Category {
    id            Int              @id @default(autoincrement())
    name          String
    movieCategory Movie_Category[]
    createdAt     DateTime         @default(now()) @map("created_at")
    updatedAt     DateTime         @updatedAt @map("updated_at")

    @@map("categories")
}

model Movie_Actor {
    id        Int      @id @default(autoincrement())
    movie     Movie    @relation(fields: [movieId], references: [id])
    movieId   Int      @map("movie_id")
    actor     Actor    @relation(fields: [actorId], references: [id])
    actorId   Int      @map("actor_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("movie_actor")
}

model Director {
    id            Int              @id @default(autoincrement())
    name          String
    movie         Movie?
    directorImage Director_Image[]
    country       Country          @relation(fields: [countryId], references: [id])
    countryId     Int              @map("country_id")
    createdAt     DateTime         @default(now()) @map("created_at")
    updatedAt     DateTime         @updatedAt @map("updated_at")

    @@map("directors")
}

model Director_Image {
    id         Int      @id @default(autoincrement())
    director   Director @relation(fields: [directorId], references: [id])
    directorId Int      @map("director_id")
    image      Image    @relation(fields: [imageId], references: [id])
    imageId    Int      @map("image_id")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@map("director_image")
}

model Actor {
    id         Int           @id @default(autoincrement())
    name       String
    movieActor Movie_Actor[]
    actorImage Actor_Image[]
    country    Country       @relation(fields: [countryId], references: [id])
    countryId  Int           @map("country_id")
    createdAt  DateTime      @default(now()) @map("created_at")
    updatedAt  DateTime      @updatedAt @map("updated_at")

    @@map("actors")
}

model Actor_Image {
    id        Int      @id @default(autoincrement())
    actor     Actor    @relation(fields: [actorId], references: [id])
    actorId   Int      @map("actor_id")
    image     Image    @relation(fields: [imageId], references: [id])
    imageId   Int      @map("image_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("actor_image")
}

model Image {
    id            Int              @id @default(autoincrement())
    path          String
    directorImage Director_Image[]
    actorImage    Actor_Image[]
    user          User?
    createdAt     DateTime         @default(now()) @map("created_at")
    updatedAt     DateTime         @updatedAt @map("updated_at")

    @@map("images")
}

enum Role {
    DEFAULT
    ADMIN
    MODERATOR
}
